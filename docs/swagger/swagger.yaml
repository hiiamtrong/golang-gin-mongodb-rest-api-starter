definitions:
  dto.AuthLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthLoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.AuthRegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthRegisterResponse:
    properties:
      created_at:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.CreateTodoRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  dto.UpdateTodoRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  model.Todo:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/login:
    post:
      parameters:
      - description: Login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthLoginResponse'
      summary: Login
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      parameters:
      - description: Register
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthRegisterResponse'
      summary: Register
      tags:
      - Auth
  /api/v1/todo:
    get:
      consumes:
      - application/json
      description: List all todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Todo'
            type: array
      security:
      - Bearer: []
      summary: List all todos
      tags:
      - Todo
    post:
      consumes:
      - application/json
      description: Create a new todo
      parameters:
      - description: Todo object that needs to be created
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Todo'
      security:
      - Bearer: []
      summary: Create a new todo
      tags:
      - Todo
  /api/v1/todo/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete a todo
      tags:
      - Todo
    put:
      consumes:
      - application/json
      description: Update a todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: Todo object that needs to be updated
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Todo'
      security:
      - Bearer: []
      summary: Update a todo
      tags:
      - Todo
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
